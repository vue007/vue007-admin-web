<template>
    <el-container>
        <el-aside width="10%">
            <el-tabs v-model="form.contentType"  tab-position="left" @tab-click="handleTabClick"
                     style="margin-top: 80px; margin-left: 5%; float: right;">
                <el-tab-pane
                    v-for="item in $global.articleTypeMap"
                    :key="item.value"
                    :label="item.label"
                    :name="item.value"></el-tab-pane>
            </el-tabs>
        </el-aside>

        <el-container>
            <el-header class="mt20" style="min-height: 60px;">
                <el-form :inline="true" :model="form" :rules="rules" ref="form" >
                    <el-form-item label="" prop="title">
                        <el-input v-model="form.title" size="mini" placeholder="标题" style="width: 300px;"></el-input>
                    </el-form-item>
                    <el-form-item label="" prop="categoryId">
                        <el-select v-model="form.categoryId" size="mini" placeholder="分类"  style="width: 100px;">
                            <ArticleCategorySH></ArticleCategorySH>
                        </el-select>
                    </el-form-item>
                    <el-form-item label="" prop="userId">
                        <el-select v-model="form.userId" size="mini" placeholder="发帖人"  style="width: 100px;">
                            <UserSH :userType="$global.userType.SYSTEM"></UserSH>
                        </el-select>
                    </el-form-item>
                    <el-form-item label="" prop="poster">
                        <el-popover
                            placement="right"
                            title=""
                            width="200"
                            trigger="click">
                            <ImgUploader
                                :defaultImg.sync="form.poster"
                                :url="uploadUrl"
                                @success="uploadSuccess">
                            </ImgUploader>
                            <el-button slot="reference" size="mini" type="info" plain  style="width: 100px;">{{ form.poster == '' ? '上传封面图' : '封面图' }}</el-button>
                        </el-popover>
                    </el-form-item>
                </el-form>
            </el-header>
            <el-main style="padding-top: 0px;">
                <template v-if="form.contentType == 1">
                    <QuillEditor @contentChange="recieveContent" :initContent="form.content"></QuillEditor>
                </template>
                <template v-if="form.contentType == 2">
                    <div style="margin: 0;" class="tl">

                        <d-player :video="video"
                                  :autoplay="autoplay"
                                  :contextmenu="contextmenu"
                                  :screenshot="true"
                                  @play="play"
                                  ref="player"></d-player>

                        <el-progress v-if="files.length" :text-inside="true" :stroke-width="18" :percentage="uploadProgress.progress" :status="uploadProgress.status"></el-progress>

                        <div class="text-center p-2 mb15 mt10">

                            <file-upload
                                extensions="mp4"
                                accept="video/mp4"
                                name="avatar"
                                class="btn btn-primary"
                                post-action="/upload/post"
                                v-model="files"
                                @input-filter="inputFilter"
                                @input-file="inputFile"
                                ref="upload">
                                <div style="cursor: pointer;" v-if="!files.length" class="el-button el-button--danger el-button--mini is-plain mt10">
                                    点此选择视频
                                </div>
                                <div class="el-button el-button--danger el-button--mini is-plain mt20" v-else-if="!uploadProgress.uploading">
                                    重新选择视频
                                </div>
                            </file-upload>
                        </div>

                    </div>
                </template>
            </el-main>
            <el-footer>
                <div >
                    <OperButton customClass="fl" content="清空抬头" type="info" icon="reset" @click="resetInfo"></OperButton>
                    <OperButton customClass="fl" content="清空内容" type="info" icon="clear" @click="clearContent" v-if="form.contentType != $global.articleType.VIDEO"></OperButton>

                    <el-button v-if="form.contentType == $global.articleType.IMAGE_TEXT" type="primary" plain @click="handleAdd" style="float:right; margin-right: 0px;">创建</el-button>
                    <el-button v-if="form.contentType == $global.articleType.VIDEO" :disabled="form.content == ''" type="primary" plain @click="handleAdd" style="float:right; margin-right: 0px;">创建</el-button>

                    <el-button v-if="files.length" :loading="uploadProgress.uploading" type="success" plain @click="uploadOss" :disabled="uploadProgress.status=='success'"
                               style="float: right; margin-right: 10px;" >上 传</el-button>
                </div>
            </el-footer>
        </el-container>
    </el-container>
</template>
<script>
    /* eslint-disable require-yield,generator-star-spacing,prefer-const */

    import {createNamespacedHelpers} from 'vuex'
    const { mapState, mapActions } = createNamespacedHelpers('content/article')

    import { OperButton } from '@/components'
    import QuillEditor from '@/components/common/QuillEditor/index'
    import ArticleCategorySH from '@/views/category/article/helper/SelectHelper'
    import UserSH from '@/views/user/user/helper/SelectHelper'
    import ImgUploader from '@/components/common/ImgUploader/index'
    import FileUpload from 'vue-upload-component'
    import DPlayer from 'vue-dplayer'

    import {STSToken} from '@/api/file/upload'

    import OSS from 'ali-oss/lib/browser'

    export default {
        components: {
            OperButton, ImgUploader, DPlayer, FileUpload,
            QuillEditor, ArticleCategorySH, UserSH
        },
        data() {
            return {
                uploadUrl: process.env.BASE_API + '/api/upload/fileupload?type=' + this.$global.uploadSourceType.ARTICLE_IMAGE,
                form: {
                    title: '',
                    categoryId: '',
                    userId: '',
                    poster: '',
                    content: '',
                    contentType: 1
                },
                rules: {
                    title: [
                        { required: true, message: '请输入标题', trigger: 'blur' },
                        { min: 2, max: 40, message: '长度在 2 到 40 个字符', trigger: 'blur' }
                    ],
                    categoryId: [
                        { required: true, message: '请选择分类', trigger: 'change' }
                    ],
                    userId: [
                        { required: true, message: '请选择一个用户', trigger: 'change' }
                    ]
                },

                files: [],
                uploadFile: {},
                uploadProgress: {
                    uploading: false,
                    progress: 0,
                    status: ''
                },
                video: {
                    url: 'http://3d-community.oss-cn-shenzhen.aliyuncs.com/video/1514182647676iphone-x.mp4',
                    pic: 'http://3d-community.oss-cn-shenzhen.aliyuncs.com/video/iphonex.png'
                },
                autoplay: true,
                player: null,
                contextmenu: [
                    {
                        text: '',
                        link: ''
                    }
                ]
            }
        },
        created: function() {
            const formStr = window.localStorage.getItem(this.$global.localStorageKey.ARTICLE_DRAFT);
            if (!formStr) {
                window.localStorage.setItem(this.$global.localStorageKey.ARTICLE_DRAFT, JSON.stringify(this.from) );
            } else {
                this.form = JSON.parse( formStr );
            }
        },
        mounted() {
            let self = this;
            self.player = self.$refs.player.dp
        },
        watch: {
            form: {
                handler: function() {
                    window.localStorage.setItem(this.$global.localStorageKey.ARTICLE_DRAFT, JSON.stringify( Object.assign({}, this.form)) );
                },
                deep: true
            }
        },
        methods: {
            ...mapActions([
                'add'
            ]),
            handleTabClick(tab, event) {
                this.form.content = '';// 类型切换时 清空内容
            },
            inputFile(newFile, oldFile, prevent) {
                this.changeVideo();
            },
            inputFilter(newFile, oldFile, prevent) {
                let self = this;
                self.uploadProgress.uploading = false;
                if (newFile && !oldFile) {
                    if (!/\.(mp4)$/i.test(newFile.name)) {
                        this.alert('Your choice is not a picture')
                        return prevent()
                    }
                }
                if (newFile && (!oldFile || newFile.file !== oldFile.file)) {
                    newFile.url = ''
                    let URL = window.URL || window.webkitURL
                    if (URL && URL.createObjectURL) {
                        newFile.url = URL.createObjectURL(newFile.file)
                    }
                }

                self.uploadProgress.status = '';
                self.uploadProgress.progress = 0;
                self.form.title = self.form.title === '' ? newFile.file.name.substring(0, newFile.file.name.indexOf('.')) : self.form.title;
                self.uploadFile = newFile.file;
                self.video.url = newFile.url;
            },
            play() {
            },
            changeVideo() {
                let self = this;
                setTimeout(function() {
                    self.player.switchVideo({
                        url: self.files[0].url
                    });
                }, 1000)
            },
            uploadOss() {
                let self = this;
                let baseOssUrl = 'http://3d-community.oss-cn-shenzhen.aliyuncs.com/';
                self.uploadProgress.uploading = true;
                var file = this.uploadFile;
                new Promise((resolve, reject) => {
                    STSToken().then(response => {
                        const result = response.data;

                        var client = new OSS.Wrapper({
                            accessKeyId: result.accessKeyId,
                            accessKeySecret: result.accessKeySecret,
                            stsToken: result.securityToken,
                            bucket: result.bucket,
                            endpoint: result.endpoint
                        });
                        const uploadPath = '/video/' + new Date().getTime() + file.name;
                        client.multipartUpload(uploadPath, file, {
                            headers: { 'x-oss-object-acl': 'public-read' },
                            progress: function* (p) {
                                self.uploadProgress.progress = parseInt( p * 100 );
                            }}).then(function (result) {
                                self.form.content = baseOssUrl + uploadPath;
                                self.uploadProgress.status = 'success';
                                self.uploadProgress.uploading = false;
                        }).catch(function (err) {
                            console.log(err);
                            self.uploadProgress.status = 'exception';
                            self.uploadProgress.uploading = false;
                        });
                        resolve()
                    }).catch(error => {
                        self.uploadProgress.status = 'exception';
                        self.uploadProgress.uploading = false;
                        reject(error)
                    })
                })
            },
            uploadSuccess(url) {
                this.form.poster = url;
            },
            handleAdd() {
                this.$refs['form'].validate((valid) => {
                    if (valid) {
                        this.add(this.form).then( data => {
                            this.routerSuccess(data);
                        }).catch(error => {
                            Promise.reject(error)
                        });
                    } else {
                        this.$message.error('请补全相关信息!');
                        return false;
                    }
                });
            },
            routerSuccess(data) {
                this.$confirm('请选择下一步操作！', '创建成功', {
                    confirmButtonText: '继续编辑此文',
                    cancelButtonText: '创建新文章',
                    type: 'success'
                }).then(() => {
                    this.resetInfo();
                    this.$router.push(
                        {
                            path: '/content/edit_article',
                            query: {id: data.id}
                        }
                    );
                }).catch(() => {
                    this.resetInfo();
                });
            },
            recieveContent(html) {
                this.form.content = html;
            },
            resetInfo() {
                this.form.title = '';
                this.form.categoryId = '';
                this.form.userId = '';
            },
            clearContent() {
                this.form.content = '';
            }
        },
        computed: {
            ...mapState({
                state: state => state
            })
        }
    }
</script>


<style lang="scss">
    .content-container {
        margin-right: 10%;
    },
    .dplayer {
        width: 98%;
        margin: 10px 0 20px 0;
    }


</style>


